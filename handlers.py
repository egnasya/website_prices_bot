import asyncio
import threading
from datetime import datetime
<<<<<<< HEAD
from aiogram import Router
=======
from aiogram import Router, types, F, Bot
>>>>>>> e2a164cd7d6ea461f958ba77ba3bf8e9ab2b4dc0
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

import manipulation_db
import price_check
import scraper

router = Router()


class Register(StatesGroup):
    url_add = State()
    feedback = State()


@router.message(CommandStart())
async def process_start_command(message: Message):

    user_id = message.from_user.id
    username = message.from_user.username
    if username is None:
        username = 'unknown'
    await manipulation_db.add_user_to_db(user_id, username)

    await message.answer(
        text='–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–Ω—ã –Ω–∞ —Ç–æ–≤–∞—Ä—ã –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–Ω–∞–ª–π–Ω –º–∞–≥–∞–∑–∏–Ω–æ–≤.\n\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã'
             ' –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–Ω—É –Ω–∞ —Ç–æ–≤–∞—Ä, –≤—ã–±–µ—Ä–∏ –≤ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥—É "–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä".\n–ï—Å–ª–∏ —Ç—ã –∑–∞—Ö–æ—á–µ—à—å '
             '–ø—Ä–µ–∫—Ä–∞–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ, —Ç–æ –≤—ã–±–µ—Ä–∏ –≤ –º–µ–Ω—é –ø—É–Ω–∫—Ç "–ü–µ—Ä–µ—Å—Ç–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–æ–≤–∞—Ä".\n–ï—Å–ª–∏ –æ–∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ –≤ –Ω–∞—à–µ–π'
             ' –±–∞–∑–µ –Ω–µ—Ç —Å–∞–π—Ç–∞, —Ü–µ–Ω—É —Å –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å - –≤—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å" –∏ –Ω–∞–ø–∏—à–∏ '
             '–Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞. –¢–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –ª—é–±—ã–µ —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è, –≤—ã–±—Ä–∞–≤ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.'
             '\n\n–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è :)'
    )


@router.message(Command('addlink'))
async def process_addlink_command(message: Message,  state: FSMContext):
    user_id = message.from_user.id
    current_products = await manipulation_db.tracking_products(user_id)
    if len(current_products) >= 5:
        await message.answer("–í—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ (5).")
        await state.set_state(None)
    else:
<<<<<<< HEAD
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä: ')
        await state.set_state(Register.url_add)


@router.message(Register.url_add)
async def process_add_command(message: Message, state: FSMContext):
    user_id = message.from_user.id
    await state.update_data(url_add=message.text)
    await message.answer('–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—èü•∫')
    try:
        message_text = await asyncio.wait_for(scraper.website_recognition(message.text, user_id), 30)
    except asyncio.TimeoutError:
        message_text = '–ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É.'
=======
        await state.update_data(url_add=message.text)
        await message.answer('–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—èü•∫')
        message_text = ''
        try:
            message_text = await asyncio.wait_for(scraper.website_recognition(message.text, user_id), 30)
        except asyncio.TimeoutError:
            message_text = '–ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É.'
            await message.answer(message_text)
            await state.set_state(Register.url_add)
>>>>>>> e2a164cd7d6ea461f958ba77ba3bf8e9ab2b4dc0
        await message.answer(message_text)
        await state.set_state(Register.url_add)
    await message.answer(message_text)
    await state.set_state(None)


@router.message(Command('remove'))
async def process_dellink_command(message: Message):
    user_id = message.from_user.id
    products = await manipulation_db.tracking_products(user_id)
    tracking_buttons = []
    for idx, product in enumerate(products):
        button = InlineKeyboardButton(text=str(product), callback_data=str(idx))
        tracking_buttons.append([button])

    keyboard = InlineKeyboardMarkup(inline_keyboard=tracking_buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä, –∑–∞ —Ü–µ–Ω–æ–π –∫–æ—Ç–æ—Ä–æ–≥–æ –±–æ–ª—å—à–µ –Ω–µ —Ö–æ—Ç–∏—Ç–µ —Å–ª–µ–¥–∏—Ç—å:", reply_markup=keyboard)


@router.callback_query()
async def callback_query_handler(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    for row in callback_query.message.reply_markup.inline_keyboard:
        for button in row:
            if button.callback_data == callback_query.data:
                deleted_product = button.text
                break
    await manipulation_db.remove_products(user_id, deleted_product)
    await callback_query.message.answer(f'–¢–æ–≤–∞—Ä {deleted_product} –±–æ–ª—å—à–µ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è.')


@router.message(Command('feedback'))
async def process_feedback_command(message: Message,  state: FSMContext):
    await message.answer('–ú–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ —É–≥–æ–¥–Ω–æ :) ')
    await state.set_state(Register.feedback)


@router.message(Register.feedback)
async def process_feedback_command(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username
    await state.update_data(feedback=message.text)
    now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    file = open('feedback.txt', 'a+')
    file.write(f'{now}: {user_id}, {username}: {message.text}\n')
    file.close()
    await message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!')
    await state.set_state(None)
